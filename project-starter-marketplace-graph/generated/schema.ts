// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class OwnershipTransferred extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save OwnershipTransferred entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type OwnershipTransferred must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("OwnershipTransferred", id.toString(), this);
    }
  }

  static load(id: string): OwnershipTransferred | null {
    return changetype<OwnershipTransferred | null>(
      store.get("OwnershipTransferred", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get previousOwner(): Bytes {
    let value = this.get("previousOwner");
    return value!.toBytes();
  }

  set previousOwner(value: Bytes) {
    this.set("previousOwner", Value.fromBytes(value));
  }

  get newOwner(): Bytes {
    let value = this.get("newOwner");
    return value!.toBytes();
  }

  set newOwner(value: Bytes) {
    this.set("newOwner", Value.fromBytes(value));
  }
}

export class Offerandmint extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Offerandmint entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Offerandmint must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Offerandmint", id.toString(), this);
    }
  }

  static load(id: string): Offerandmint | null {
    return changetype<Offerandmint | null>(store.get("Offerandmint", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get _owner(): Bytes {
    let value = this.get("_owner");
    return value!.toBytes();
  }

  set _owner(value: Bytes) {
    this.set("_owner", Value.fromBytes(value));
  }

  get _bidder(): Bytes {
    let value = this.get("_bidder");
    return value!.toBytes();
  }

  set _bidder(value: Bytes) {
    this.set("_bidder", Value.fromBytes(value));
  }

  get _amount(): BigInt {
    let value = this.get("_amount");
    return value!.toBigInt();
  }

  set _amount(value: BigInt) {
    this.set("_amount", Value.fromBigInt(value));
  }

  get uri(): string | null {
    let value = this.get("uri");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set uri(value: string | null) {
    if (!value) {
      this.unset("uri");
    } else {
      this.set("uri", Value.fromString(<string>value));
    }
  }

  get mintIndex(): BigInt {
    let value = this.get("mintIndex");
    return value!.toBigInt();
  }

  set mintIndex(value: BigInt) {
    this.set("mintIndex", Value.fromBigInt(value));
  }

  get v(): i32 {
    let value = this.get("v");
    return value!.toI32();
  }

  set v(value: i32) {
    this.set("v", Value.fromI32(value));
  }

  get r(): Bytes {
    let value = this.get("r");
    return value!.toBytes();
  }

  set r(value: Bytes) {
    this.set("r", Value.fromBytes(value));
  }

  get s(): Bytes {
    let value = this.get("s");
    return value!.toBytes();
  }

  set s(value: Bytes) {
    this.set("s", Value.fromBytes(value));
  }

  get contractAddress(): Bytes {
    let value = this.get("contractAddress");
    return value!.toBytes();
  }

  set contractAddress(value: Bytes) {
    this.set("contractAddress", Value.fromBytes(value));
  }
}

export class Acceptbidandmint extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Acceptbidandmint entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Acceptbidandmint must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Acceptbidandmint", id.toString(), this);
    }
  }

  static load(id: string): Acceptbidandmint | null {
    return changetype<Acceptbidandmint | null>(
      store.get("Acceptbidandmint", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get _seller(): Bytes {
    let value = this.get("_seller");
    return value!.toBytes();
  }

  set _seller(value: Bytes) {
    this.set("_seller", Value.fromBytes(value));
  }

  get _bidder(): Bytes {
    let value = this.get("_bidder");
    return value!.toBytes();
  }

  set _bidder(value: Bytes) {
    this.set("_bidder", Value.fromBytes(value));
  }

  get _amount(): BigInt {
    let value = this.get("_amount");
    return value!.toBigInt();
  }

  set _amount(value: BigInt) {
    this.set("_amount", Value.fromBigInt(value));
  }

  get uri(): string | null {
    let value = this.get("uri");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set uri(value: string | null) {
    if (!value) {
      this.unset("uri");
    } else {
      this.set("uri", Value.fromString(<string>value));
    }
  }

  get mintIndex(): BigInt {
    let value = this.get("mintIndex");
    return value!.toBigInt();
  }

  set mintIndex(value: BigInt) {
    this.set("mintIndex", Value.fromBigInt(value));
  }

  get deadline(): BigInt {
    let value = this.get("deadline");
    return value!.toBigInt();
  }

  set deadline(value: BigInt) {
    this.set("deadline", Value.fromBigInt(value));
  }

  get v(): i32 {
    let value = this.get("v");
    return value!.toI32();
  }

  set v(value: i32) {
    this.set("v", Value.fromI32(value));
  }

  get r(): Bytes {
    let value = this.get("r");
    return value!.toBytes();
  }

  set r(value: Bytes) {
    this.set("r", Value.fromBytes(value));
  }

  get s(): Bytes {
    let value = this.get("s");
    return value!.toBytes();
  }

  set s(value: Bytes) {
    this.set("s", Value.fromBytes(value));
  }

  get contractAddress(): Bytes {
    let value = this.get("contractAddress");
    return value!.toBytes();
  }

  set contractAddress(value: Bytes) {
    this.set("contractAddress", Value.fromBytes(value));
  }
}

export class Buyandmint extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Buyandmint entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Buyandmint must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Buyandmint", id.toString(), this);
    }
  }

  static load(id: string): Buyandmint | null {
    return changetype<Buyandmint | null>(store.get("Buyandmint", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get _seller(): Bytes {
    let value = this.get("_seller");
    return value!.toBytes();
  }

  set _seller(value: Bytes) {
    this.set("_seller", Value.fromBytes(value));
  }

  get _buyer(): Bytes {
    let value = this.get("_buyer");
    return value!.toBytes();
  }

  set _buyer(value: Bytes) {
    this.set("_buyer", Value.fromBytes(value));
  }

  get _amount(): BigInt {
    let value = this.get("_amount");
    return value!.toBigInt();
  }

  set _amount(value: BigInt) {
    this.set("_amount", Value.fromBigInt(value));
  }

  get uri(): string | null {
    let value = this.get("uri");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set uri(value: string | null) {
    if (!value) {
      this.unset("uri");
    } else {
      this.set("uri", Value.fromString(<string>value));
    }
  }

  get mintIndex(): BigInt {
    let value = this.get("mintIndex");
    return value!.toBigInt();
  }

  set mintIndex(value: BigInt) {
    this.set("mintIndex", Value.fromBigInt(value));
  }

  get v(): i32 {
    let value = this.get("v");
    return value!.toI32();
  }

  set v(value: i32) {
    this.set("v", Value.fromI32(value));
  }

  get r(): Bytes {
    let value = this.get("r");
    return value!.toBytes();
  }

  set r(value: Bytes) {
    this.set("r", Value.fromBytes(value));
  }

  get s(): Bytes {
    let value = this.get("s");
    return value!.toBytes();
  }

  set s(value: Bytes) {
    this.set("s", Value.fromBytes(value));
  }

  get contractAddress(): Bytes {
    let value = this.get("contractAddress");
    return value!.toBytes();
  }

  set contractAddress(value: Bytes) {
    this.set("contractAddress", Value.fromBytes(value));
  }
}

export class Offerandtransfer extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Offerandtransfer entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Offerandtransfer must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Offerandtransfer", id.toString(), this);
    }
  }

  static load(id: string): Offerandtransfer | null {
    return changetype<Offerandtransfer | null>(
      store.get("Offerandtransfer", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get _owner(): Bytes {
    let value = this.get("_owner");
    return value!.toBytes();
  }

  set _owner(value: Bytes) {
    this.set("_owner", Value.fromBytes(value));
  }

  get _bidder(): Bytes {
    let value = this.get("_bidder");
    return value!.toBytes();
  }

  set _bidder(value: Bytes) {
    this.set("_bidder", Value.fromBytes(value));
  }

  get _amount(): BigInt {
    let value = this.get("_amount");
    return value!.toBigInt();
  }

  set _amount(value: BigInt) {
    this.set("_amount", Value.fromBigInt(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    return value!.toBigInt();
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get v(): i32 {
    let value = this.get("v");
    return value!.toI32();
  }

  set v(value: i32) {
    this.set("v", Value.fromI32(value));
  }

  get r(): Bytes {
    let value = this.get("r");
    return value!.toBytes();
  }

  set r(value: Bytes) {
    this.set("r", Value.fromBytes(value));
  }

  get s(): Bytes {
    let value = this.get("s");
    return value!.toBytes();
  }

  set s(value: Bytes) {
    this.set("s", Value.fromBytes(value));
  }

  get contractAddress(): Bytes {
    let value = this.get("contractAddress");
    return value!.toBytes();
  }

  set contractAddress(value: Bytes) {
    this.set("contractAddress", Value.fromBytes(value));
  }
}

export class Acceptbidandtransfer extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Acceptbidandtransfer entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Acceptbidandtransfer must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Acceptbidandtransfer", id.toString(), this);
    }
  }

  static load(id: string): Acceptbidandtransfer | null {
    return changetype<Acceptbidandtransfer | null>(
      store.get("Acceptbidandtransfer", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get _seller(): Bytes {
    let value = this.get("_seller");
    return value!.toBytes();
  }

  set _seller(value: Bytes) {
    this.set("_seller", Value.fromBytes(value));
  }

  get _bidder(): Bytes {
    let value = this.get("_bidder");
    return value!.toBytes();
  }

  set _bidder(value: Bytes) {
    this.set("_bidder", Value.fromBytes(value));
  }

  get _amount(): BigInt {
    let value = this.get("_amount");
    return value!.toBigInt();
  }

  set _amount(value: BigInt) {
    this.set("_amount", Value.fromBigInt(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    return value!.toBigInt();
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get deadline(): BigInt {
    let value = this.get("deadline");
    return value!.toBigInt();
  }

  set deadline(value: BigInt) {
    this.set("deadline", Value.fromBigInt(value));
  }

  get v(): i32 {
    let value = this.get("v");
    return value!.toI32();
  }

  set v(value: i32) {
    this.set("v", Value.fromI32(value));
  }

  get r(): Bytes {
    let value = this.get("r");
    return value!.toBytes();
  }

  set r(value: Bytes) {
    this.set("r", Value.fromBytes(value));
  }

  get s(): Bytes {
    let value = this.get("s");
    return value!.toBytes();
  }

  set s(value: Bytes) {
    this.set("s", Value.fromBytes(value));
  }

  get contractAddress(): Bytes {
    let value = this.get("contractAddress");
    return value!.toBytes();
  }

  set contractAddress(value: Bytes) {
    this.set("contractAddress", Value.fromBytes(value));
  }
}

export class Buyandtransfer extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Buyandtransfer entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Buyandtransfer must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Buyandtransfer", id.toString(), this);
    }
  }

  static load(id: string): Buyandtransfer | null {
    return changetype<Buyandtransfer | null>(store.get("Buyandtransfer", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get _seller(): Bytes {
    let value = this.get("_seller");
    return value!.toBytes();
  }

  set _seller(value: Bytes) {
    this.set("_seller", Value.fromBytes(value));
  }

  get _buyer(): Bytes {
    let value = this.get("_buyer");
    return value!.toBytes();
  }

  set _buyer(value: Bytes) {
    this.set("_buyer", Value.fromBytes(value));
  }

  get _amount(): BigInt {
    let value = this.get("_amount");
    return value!.toBigInt();
  }

  set _amount(value: BigInt) {
    this.set("_amount", Value.fromBigInt(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    return value!.toBigInt();
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get v(): i32 {
    let value = this.get("v");
    return value!.toI32();
  }

  set v(value: i32) {
    this.set("v", Value.fromI32(value));
  }

  get r(): Bytes {
    let value = this.get("r");
    return value!.toBytes();
  }

  set r(value: Bytes) {
    this.set("r", Value.fromBytes(value));
  }

  get s(): Bytes {
    let value = this.get("s");
    return value!.toBytes();
  }

  set s(value: Bytes) {
    this.set("s", Value.fromBytes(value));
  }

  get contractAddress(): Bytes {
    let value = this.get("contractAddress");
    return value!.toBytes();
  }

  set contractAddress(value: Bytes) {
    this.set("contractAddress", Value.fromBytes(value));
  }
}

export class Withdrawstoredinaccount extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save Withdrawstoredinaccount entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Withdrawstoredinaccount must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Withdrawstoredinaccount", id.toString(), this);
    }
  }

  static load(id: string): Withdrawstoredinaccount | null {
    return changetype<Withdrawstoredinaccount | null>(
      store.get("Withdrawstoredinaccount", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get recipient(): Bytes {
    let value = this.get("recipient");
    return value!.toBytes();
  }

  set recipient(value: Bytes) {
    this.set("recipient", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }
}
